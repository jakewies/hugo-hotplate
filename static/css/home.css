html,
body {
  background-color: #fff;
  color: #111;
  height: 100%;
}
html {
  -webkit-box-sizing: border-box;
          box-sizing: border-box;
}
*,
*:before,
*:after {
  padding: 0;
  margin: 0;
  -webkit-box-sizing: inherit;
          box-sizing: inherit;
}
/* Typebase.less v0.1.0 | MIT License */
html {
/* Change default typefaces here */
  font-family: -apple-system, BlinkMacSystemFont, "Segoe UI", Roboto, Oxygen-Sans, Ubuntu, Cantarell, "Helvetica Neue", sans-serif;
  font-size: 22/1600%;
  -webkit-font-smoothing: antialiased;
}
p {
  line-height: 1.5rem;
  margin-top: 1.5rem;
  margin-bottom: 0;
}
ul,
ol {
  margin-top: 1.5rem;
  margin-bottom: 1.5rem;
}
ul li,
ol li {
  line-height: 1.5rem;
}
ul ul,
ol ul,
ul ol,
ol ol {
  margin-top: 0;
  margin-bottom: 0;
}
blockquote {
  line-height: 1.5rem;
  margin-top: 1.5rem;
  margin-bottom: 1.5rem;
}
h1,
h2,
h3,
h4,
h5,
h6 {
/* Change heading typefaces here */
  font-family: sans-serif;
  margin-top: 1.5rem;
  margin-bottom: 0;
  line-height: 1.5rem;
}
h1 {
  font-size: 4.242rem;
  line-height: 4.5rem;
  margin-top: 3rem;
}
h2 {
  font-size: 2.828rem;
  line-height: 3rem;
  margin-top: 3rem;
}
h3 {
  font-size: 1.414rem;
}
h4 {
  font-size: 1.414/2rem;
}
h5 {
  font-size: 1.414/3rem;
}
h6 {
  font-size: 1.414/4rem;
}
table {
  margin-top: 1.5rem;
  border-spacing: 0px;
  border-collapse: collapse;
}
td,
th {
  padding: 0;
  line-height: 33px;
}
code {
  vertical-align: bottom;
}
.lead {
  font-size: 1.414rem;
}
.hug {
  margin-top: 0;
}
.container {
  height: 100%;
}
.header {
  display: -webkit-box;
  display: -ms-flexbox;
  display: flex;
  -webkit-box-orient: vertical;
  -webkit-box-direction: normal;
      -ms-flex-direction: column;
          flex-direction: column;
  -webkit-box-align: center;
      -ms-flex-align: center;
          align-items: center;
}
p {
  font-size: 1.2rem;
}

/*# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3BhcnRpYWxzL19yZXNldC5zdHlsIiwiaG9tZS5jc3MiLCIuLi92ZW5kb3IvdHlwZWJhc2Uuc3R5bCIsIi4uL21haW4uc3R5bCIsImhvbWUuc3R5bCJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTs7RUFFRSx1QkFBQTtFQUNBLFlBQUE7RUFDQSxhQUFBO0NDQ0Q7QURDRDtFQUNFLCtCQUFBO1VBQUEsdUJBQUE7Q0NDRDtBRENEOzs7RUFHRSxXQUFBO0VBQ0EsVUFBQTtFQUNBLDRCQUFBO1VBQUEsb0JBQUE7Q0NDRDtBQ2ZELHdDQUFBO0FBWUE7QUFDSSxtQ0FBQTtFQUNBLGlJQUFBO0VBQ0Esb0JBQUE7RUFFQSxvQ0FBQTtDREtIO0FDR0Q7RUFDSSxvQkFBQTtFQUNBLG1CQUFBO0VBQ0EsaUJBQUE7Q0RESDtBQ0dEOztFQUVJLG1CQUFBO0VBQ0Esc0JBQUE7Q0RESDtBQ0VHOztFQUNJLG9CQUFBO0NEQ1A7QUNDRzs7OztFQUVJLGNBQUE7RUFDQSxpQkFBQTtDREdQO0FDQUQ7RUFDSSxvQkFBQTtFQUNBLG1CQUFBO0VBQ0Esc0JBQUE7Q0RFSDtBQ0VEOzs7Ozs7QUFNSSxtQ0FBQTtFQUNBLHdCQUFBO0VBQ0EsbUJBQUE7RUFDQSxpQkFBQTtFQUNBLG9CQUFBO0NEQUg7QUNFRDtFQUNJLG9CQUFBO0VBQ0Esb0JBQUE7RUFDQSxpQkFBQTtDREFIO0FDRUQ7RUFDSSxvQkFBQTtFQUNBLGtCQUFBO0VBQ0EsaUJBQUE7Q0RBSDtBQ0VEO0VBQ0ksb0JBQUE7Q0RBSDtBQ0VEO0VBQ0ksc0JBQUE7Q0RBSDtBQ0VEO0VBQ0ksc0JBQUE7Q0RBSDtBQ0VEO0VBQ0ksc0JBQUE7Q0RBSDtBQ0lEO0VBQ0ksbUJBQUE7RUFDQSxvQkFBQTtFQUNBLDBCQUFBO0NERkg7QUNJRDs7RUFFSSxXQUFBO0VBQ0Esa0JBQUE7Q0RGSDtBQ01EO0VBRUksdUJBQUE7Q0RMSDtBQ1NEO0VBQ0ksb0JBQUE7Q0RQSDtBQ1dEO0VBQ0ksY0FBQTtDRFRIO0FFbEdEO0VBQ0UsYUFBQTtDRm9HRDtBR3RHRDtFQUNFLHFCQUFBO0VBQUEscUJBQUE7RUFBQSxjQUFBO0VBQ0EsNkJBQUE7RUFBQSw4QkFBQTtNQUFBLDJCQUFBO1VBQUEsdUJBQUE7RUFDQSwwQkFBQTtNQUFBLHVCQUFBO1VBQUEsb0JBQUE7Q0h3R0Q7QUd0R0Q7RUFDRSxrQkFBQTtDSHdHRCIsImZpbGUiOiJob21lLmNzcyIsInNvdXJjZXNDb250ZW50IjpbImh0bWwsXG5ib2R5IFxuICBiYWNrZ3JvdW5kLWNvbG9yOiAjZmZmXG4gIGNvbG9yOiAjMTExXG4gIGhlaWdodDogMTAwJVxuXG5odG1sXG4gIGJveC1zaXppbmc6IGJvcmRlci1ib3hcbiAgXG4qLFxuKjpiZWZvcmUsXG4qOmFmdGVyXG4gIHBhZGRpbmc6IDBcbiAgbWFyZ2luOiAwXG4gIGJveC1zaXppbmc6IGluaGVyaXQgIiwiaHRtbCxcbmJvZHkge1xuICBiYWNrZ3JvdW5kLWNvbG9yOiAjZmZmO1xuICBjb2xvcjogIzExMTtcbiAgaGVpZ2h0OiAxMDAlO1xufVxuaHRtbCB7XG4gIGJveC1zaXppbmc6IGJvcmRlci1ib3g7XG59XG4qLFxuKjpiZWZvcmUsXG4qOmFmdGVyIHtcbiAgcGFkZGluZzogMDtcbiAgbWFyZ2luOiAwO1xuICBib3gtc2l6aW5nOiBpbmhlcml0O1xufVxuLyogVHlwZWJhc2UubGVzcyB2MC4xLjAgfCBNSVQgTGljZW5zZSAqL1xuaHRtbCB7XG4vKiBDaGFuZ2UgZGVmYXVsdCB0eXBlZmFjZXMgaGVyZSAqL1xuICBmb250LWZhbWlseTogLWFwcGxlLXN5c3RlbSwgQmxpbmtNYWNTeXN0ZW1Gb250LCBcIlNlZ29lIFVJXCIsIFJvYm90bywgT3h5Z2VuLVNhbnMsIFVidW50dSwgQ2FudGFyZWxsLCBcIkhlbHZldGljYSBOZXVlXCIsIHNhbnMtc2VyaWY7XG4gIGZvbnQtc2l6ZTogMjIvMTYwMCU7XG4gIC13ZWJraXQtZm9udC1zbW9vdGhpbmc6IGFudGlhbGlhc2VkO1xufVxucCB7XG4gIGxpbmUtaGVpZ2h0OiAxLjVyZW07XG4gIG1hcmdpbi10b3A6IDEuNXJlbTtcbiAgbWFyZ2luLWJvdHRvbTogMDtcbn1cbnVsLFxub2wge1xuICBtYXJnaW4tdG9wOiAxLjVyZW07XG4gIG1hcmdpbi1ib3R0b206IDEuNXJlbTtcbn1cbnVsIGxpLFxub2wgbGkge1xuICBsaW5lLWhlaWdodDogMS41cmVtO1xufVxudWwgdWwsXG5vbCB1bCxcbnVsIG9sLFxub2wgb2wge1xuICBtYXJnaW4tdG9wOiAwO1xuICBtYXJnaW4tYm90dG9tOiAwO1xufVxuYmxvY2txdW90ZSB7XG4gIGxpbmUtaGVpZ2h0OiAxLjVyZW07XG4gIG1hcmdpbi10b3A6IDEuNXJlbTtcbiAgbWFyZ2luLWJvdHRvbTogMS41cmVtO1xufVxuaDEsXG5oMixcbmgzLFxuaDQsXG5oNSxcbmg2IHtcbi8qIENoYW5nZSBoZWFkaW5nIHR5cGVmYWNlcyBoZXJlICovXG4gIGZvbnQtZmFtaWx5OiBzYW5zLXNlcmlmO1xuICBtYXJnaW4tdG9wOiAxLjVyZW07XG4gIG1hcmdpbi1ib3R0b206IDA7XG4gIGxpbmUtaGVpZ2h0OiAxLjVyZW07XG59XG5oMSB7XG4gIGZvbnQtc2l6ZTogNC4yNDJyZW07XG4gIGxpbmUtaGVpZ2h0OiA0LjVyZW07XG4gIG1hcmdpbi10b3A6IDNyZW07XG59XG5oMiB7XG4gIGZvbnQtc2l6ZTogMi44MjhyZW07XG4gIGxpbmUtaGVpZ2h0OiAzcmVtO1xuICBtYXJnaW4tdG9wOiAzcmVtO1xufVxuaDMge1xuICBmb250LXNpemU6IDEuNDE0cmVtO1xufVxuaDQge1xuICBmb250LXNpemU6IDEuNDE0LzJyZW07XG59XG5oNSB7XG4gIGZvbnQtc2l6ZTogMS40MTQvM3JlbTtcbn1cbmg2IHtcbiAgZm9udC1zaXplOiAxLjQxNC80cmVtO1xufVxudGFibGUge1xuICBtYXJnaW4tdG9wOiAxLjVyZW07XG4gIGJvcmRlci1zcGFjaW5nOiAwcHg7XG4gIGJvcmRlci1jb2xsYXBzZTogY29sbGFwc2U7XG59XG50ZCxcbnRoIHtcbiAgcGFkZGluZzogMDtcbiAgbGluZS1oZWlnaHQ6IDMzcHg7XG59XG5jb2RlIHtcbiAgdmVydGljYWwtYWxpZ246IGJvdHRvbTtcbn1cbi5sZWFkIHtcbiAgZm9udC1zaXplOiAxLjQxNHJlbTtcbn1cbi5odWcge1xuICBtYXJnaW4tdG9wOiAwO1xufVxuLmNvbnRhaW5lciB7XG4gIGhlaWdodDogMTAwJTtcbn1cbi5oZWFkZXIge1xuICBkaXNwbGF5OiBmbGV4O1xuICBmbGV4LWRpcmVjdGlvbjogY29sdW1uO1xuICBhbGlnbi1pdGVtczogY2VudGVyO1xufVxucCB7XG4gIGZvbnQtc2l6ZTogMS4ycmVtO1xufVxuIiwiLyohIFR5cGViYXNlLmxlc3MgdjAuMS4wIHwgTUlUIExpY2Vuc2UgKi9cblxuLy8gVHlwZXNldHRpbmcgdmFyaWFibGVzLiBFZGl0IHRoZXNlIVxuYmFzZUZvbnRTaXplID0gICAgMjIgLy8gaW4gcGl4ZWxzLiBUaGlzIHdvdWxkIHJlc3VsdCBpbiAyMnB4IG9uIGRlc2t0b3BcbmJhc2VMaW5lSGVpZ2h0ID0gMS41IC8vIGhvdyBsYXJnZSB0aGUgbGluZSBoZWlnaHQgaXMgYXMgYSBtdWx0aXBsZSBvZiBmb250IHNpemVcbmxlYWRpbmcgPSAgICAgICAgICAgICAgIGJhc2VMaW5lSGVpZ2h0ICogMXJlbVxuLy8gUmF0ZSBvZiBncm93dGggZm9yIGhlYWRpbmdzXG4vLyBJIGFjdHVhbGx5IGxpa2UgdGhpcyB0byBiZSBzbGlnaHRseSBzbWFsbGVyIHRoZW4gdGhlIGxlYWRpbmcuIE1ha2VzIGZvciB0aWdodCBoZWFkaW5ncy5cbnNjYWxlID0gMS40MTRcblxuLyogU2V0dXAgKi9cblxuaHRtbCBcbiAgICAvKiBDaGFuZ2UgZGVmYXVsdCB0eXBlZmFjZXMgaGVyZSAqL1xuICAgIGZvbnQtZmFtaWx5IC1hcHBsZS1zeXN0ZW0sIEJsaW5rTWFjU3lzdGVtRm9udCwgXCJTZWdvZSBVSVwiLCBSb2JvdG8sIE94eWdlbi1TYW5zLCBVYnVudHUsQ2FudGFyZWxsLCBcIkhlbHZldGljYSBOZXVlXCIsIHNhbnMtc2VyaWZcbiAgICBmb250LXNpemUgYmFzZUZvbnRTaXplIC8gMTYgKiAxMDAlXG4gICAgLy8gTWFrZSBldmVyeXRoaW5nIGxvb2sgYSBsaXR0bGUgbmljZXIgaW4gd2Via2l0XG4gICAgLXdlYmtpdC1mb250LXNtb290aGluZyBhbnRpYWxpYXNlZFxuICAgIC8vIC13ZWJraXQtdGV4dC1zaXplLWFkanVzdCBhdXRvXG4gICAgLy8gLW1vei10ZXh0LXNpemUtYWRqdXN0IGF1dG9cbiAgICAvLyAtbXMtdGV4dC1zaXplLWFkanVzdCBhdXRvXG4gICAgLy8gLW8tdGV4dC1zaXplLWFkanVzdCBhdXRvXG4gICAgLy8gdGV4dC1zaXplLWFkanVzdCBhdXRvXG5cbi8qIENvcHkgJiBMaXN0cyAqL1xucFxuICAgIGxpbmUtaGVpZ2h0ICAgICAgICBsZWFkaW5nXG4gICAgbWFyZ2luLXRvcCAgICAgICBsZWFkaW5nXG4gICAgbWFyZ2luLWJvdHRvbSAwXG5cbnVsLFxub2xcbiAgICBtYXJnaW4tdG9wIGxlYWRpbmdcbiAgICBtYXJnaW4tYm90dG9tIGxlYWRpbmdcbiAgICBsaSBcbiAgICAgICAgbGluZS1oZWlnaHQgbGVhZGluZ1xuICAgIFxuICAgIHVsLFxuICAgIG9sIFxuICAgICAgICBtYXJnaW4tdG9wIDBcbiAgICAgICAgbWFyZ2luLWJvdHRvbSAwXG4gICAgXG5cbmJsb2NrcXVvdGUgXG4gICAgbGluZS1oZWlnaHQgbGVhZGluZ1xuICAgIG1hcmdpbi10b3AgbGVhZGluZ1xuICAgIG1hcmdpbi1ib3R0b20gbGVhZGluZ1xuXG4vKiBIZWFkaW5ncyAqL1xuXG5oMSxcbmgyLFxuaDMsXG5oNCxcbmg1LFxuaDYgXG4gICAgLyogQ2hhbmdlIGhlYWRpbmcgdHlwZWZhY2VzIGhlcmUgKi9cbiAgICBmb250LWZhbWlseSAgICAgICAgc2Fucy1zZXJpZlxuICAgIG1hcmdpbi10b3AgICAgICAgbGVhZGluZ1xuICAgIG1hcmdpbi1ib3R0b20gMFxuICAgIGxpbmUtaGVpZ2h0ICAgICAgICBsZWFkaW5nXG5cbmgxXG4gICAgZm9udC1zaXplICAgICAgMyAqIHNjYWxlICogMXJlbVxuICAgIGxpbmUtaGVpZ2h0ICAgMyAqIGxlYWRpbmdcbiAgICBtYXJnaW4tdG9wICAyICogbGVhZGluZ1xuXG5oMiBcbiAgICBmb250LXNpemUgICAgIDIgKiBzY2FsZSAqIDFyZW1cbiAgICBsaW5lLWhlaWdodCAgMiAqIGxlYWRpbmdcbiAgICBtYXJnaW4tdG9wIDIgKiBsZWFkaW5nXG5cbmgzIFxuICAgIGZvbnQtc2l6ZSAgICAgMSAqIHNjYWxlICogMXJlbVxuXG5oNCBcbiAgICBmb250LXNpemUgICAgIHNjYWxlIC8gMiAqIDFyZW1cblxuaDUgXG4gICAgZm9udC1zaXplICAgICBzY2FsZSAvIDMgKiAxcmVtXG5cbmg2IFxuICAgIGZvbnQtc2l6ZSAgICAgc2NhbGUgLyA0ICogMXJlbVxuXG4vKiBUYWJsZXMgKi9cblxudGFibGVcbiAgICBtYXJnaW4tdG9wICAgICAgICAgbGVhZGluZ1xuICAgIGJvcmRlci1zcGFjaW5nICAwcHhcbiAgICBib3JkZXItY29sbGFwc2UgY29sbGFwc2VcblxudGQsXG50aFxuICAgIHBhZGRpbmcgICAgIDBcbiAgICBsaW5lLWhlaWdodCBiYXNlTGluZUhlaWdodCAqIGJhc2VGb250U2l6ZSAtIDBweFxuXG4vKiBDb2RlIGJsb2NrcyAqL1xuXG5jb2RlIFxuICAgIC8vIEZvcmNlcyB0ZXh0IHRvIGNvbnN0cmFpbiB0byB0aGUgbGluZS1oZWlnaHQuIE5vdCBpZGVhbCwgYnV0IHdvcmtzLlxuICAgIHZlcnRpY2FsLWFsaWduIGJvdHRvbVxuICAgIFxuLyogTGVhZGluZyBwYXJhZ3JhcGggdGV4dCAqL1xuXG4ubGVhZCBcbiAgICBmb250LXNpemUgc2NhbGUgKiAxcmVtXG5cbi8qIEh1ZyBhIHRoZSBibG9jayBhYm92ZSB5b3UgKi9cblxuLmh1ZyBcbiAgICBtYXJnaW4tdG9wIDAiLCJAaW1wb3J0ICdwYXJ0aWFscy9fcmVzZXQnXG5AaW1wb3J0ICd2ZW5kb3IvdHlwZWJhc2UnXG5cbi5jb250YWluZXIgXG4gIGhlaWdodDogMTAwJSIsIkBpbXBvcnQgJy4uL21haW4nXG5cbi5oZWFkZXJcbiAgZGlzcGxheTogZmxleFxuICBmbGV4LWRpcmVjdGlvbjogY29sdW1uXG4gIGFsaWduLWl0ZW1zOiBjZW50ZXJcblxucFxuICBmb250LXNpemU6IDEuMnJlbVxuIl19 */
